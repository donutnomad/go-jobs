// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/jobs/scheduler/internal/api"
	"github.com/jobs/scheduler/internal/biz/executor"
	"github.com/jobs/scheduler/internal/biz/task"
	"github.com/jobs/scheduler/internal/infra/persistence/commonrepo"
	"github.com/jobs/scheduler/internal/infra/persistence/executionrepo"
	"github.com/jobs/scheduler/internal/infra/persistence/executorrepo"
	"github.com/jobs/scheduler/internal/infra/persistence/loadbalancerepo"
	"github.com/jobs/scheduler/internal/infra/persistence/schedulerinstancerepo"
	"github.com/jobs/scheduler/internal/infra/persistence/taskrepo"
	"github.com/jobs/scheduler/internal/loadbalance"
	"github.com/jobs/scheduler/internal/scheduler"
	"github.com/jobs/scheduler/pkg/config"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func InitilizeApp(logger *zap.Logger, cfg config.Config, db commonrepo.DB) (*App, error) {
	repo := loadbalancerepo.NewMysqlRepositoryImpl(db)
	taskRepo := taskrepo.NewMysqlRepositoryImpl(db)
	executionRepo := executionrepo.NewMysqlRepositoryImpl(db)
	manager := loadbalance.NewManager(repo, taskRepo, executionRepo)
	taskRunnerConfig, err := ProvideTaskRunnerConfig(cfg)
	if err != nil {
		return nil, err
	}
	executorRepo := executorrepo.NewMysqlRepositoryImpl(db)
	taskRunner := scheduler.NewTaskRunner(manager, logger, taskRunnerConfig, taskRepo, executionRepo, executorRepo)
	healthCheckConfig := ProvideHealthCheckConfig(cfg)
	healthChecker := scheduler.NewHealthChecker(logger, healthCheckConfig, taskRunner, executorRepo)
	scheduler_instanceRepo := schedulerinstancerepo.NewMysqlRepositoryImpl(db)
	client := ProvideRedisClient(cfg)
	schedulerScheduler, err := scheduler.New(cfg, db, logger, taskRunner, manager, healthChecker, taskRepo, executionRepo, scheduler_instanceRepo, client)
	if err != nil {
		return nil, err
	}
	eventBus := scheduler.NewEventBus(schedulerScheduler, client)
	usecase := task.NewUsecase(taskRepo)
	iTaskAPI := api.NewTaskAPI(eventBus, usecase, taskRepo, executionRepo, executorRepo)
	iExecutionAPI := api.NewExecutionAPI(logger, eventBus, executionRepo, taskRepo, executorRepo)
	executorUsecase := executor.NewUsecase(executorRepo)
	iExecutorAPI := api.NewExecutorAPI(logger, executorRepo, taskRepo, executorUsecase)
	iCommonAPI := api.NewCommonAPI(scheduler_instanceRepo)
	server := api.NewServer(logger, iTaskAPI, iExecutionAPI, iExecutorAPI, iCommonAPI)
	app := NewApp(schedulerScheduler, eventBus, server)
	return app, nil
}
