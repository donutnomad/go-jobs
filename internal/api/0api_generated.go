// Code generated by swagGen. DO NOT EDIT.
//
// This file contains Swagger documentation and Gin binding code.
// Generated from interface definitions with Swagger annotations.

package api

import (
	strings "strings"

	gin "github.com/gin-gonic/gin"
	cast "github.com/spf13/cast"
)

func NewCommonAPIWrap(inner ICommonAPI) *CommonAPIWrap {
	return &CommonAPIWrap{
		inner: inner,
	}
}

func NewExecutionAPIWrap(inner IExecutionAPI) *ExecutionAPIWrap {
	return &ExecutionAPIWrap{
		inner: inner,
	}
}

func NewExecutorAPIWrap(inner IExecutorAPI) *ExecutorAPIWrap {
	return &ExecutorAPIWrap{
		inner: inner,
	}
}

func NewTaskAPIWrap(inner ITaskAPI) *TaskAPIWrap {
	return &TaskAPIWrap{
		inner: inner,
	}
}

type ICommonAPIHandler interface {
	PreHandlers() []gin.HandlerFunc
}

type IExecutionAPIHandler interface {
	PreHandlers() []gin.HandlerFunc
}

type IExecutorAPIHandler interface {
	PreHandlers() []gin.HandlerFunc
}

type ITaskAPIHandler interface {
	PreHandlers() []gin.HandlerFunc
}

type CommonAPIWrap struct {
	inner ICommonAPI
}

func (a *CommonAPIWrap) bind(router gin.IRoutes, method, path string, preHandlers, innerHandlers []gin.HandlerFunc, f gin.HandlerFunc) {
	var basePath string
	if v, ok := router.(interface {
		BasePath() string
	}); ok {
		basePath = v.BasePath()
	}
	handlers := make([]gin.HandlerFunc, 0, len(preHandlers)+len(innerHandlers)+1)
	handlers = append(handlers, preHandlers...)
	handlers = append(handlers, innerHandlers...)
	handlers = append(handlers, f)
	router.Handle(method, strings.TrimPrefix(path, basePath), handlers...)
}

// HealthCheck
// @Summary 健康检查
// @Description 检查服务是否健康
// @Produce json
// @Success 200 {object} gin.H
// @Router api/v1/health [get]
func (a *CommonAPIWrap) HealthCheck(ctx *gin.Context) {
	result, err := a.inner.HealthCheck(ctx)
	onGinResponse[gin.H](ctx, result, err)
}

// SchedulerStats
// @Summary 获取执行统计
// @Description 获取指定任务的执行统计
// @Produce json
// @Success 200 {object} SchedulerStatsResp
// @Router api/v1/scheduler/status [get]
func (a *CommonAPIWrap) SchedulerStats(ctx *gin.Context) {
	result, err := a.inner.SchedulerStats(ctx)
	onGinResponse[SchedulerStatsResp](ctx, result, err)
}

func (a *CommonAPIWrap) BindHealthCheck(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "api/v1/health", preHandlers, nil, a.HealthCheck)
}

func (a *CommonAPIWrap) BindSchedulerStats(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "api/v1/scheduler/status", preHandlers, nil, a.SchedulerStats)
}

func (a *CommonAPIWrap) BindAll(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.BindHealthCheck(router, preHandlers...)
	a.BindSchedulerStats(router, preHandlers...)
}

type ExecutionAPIWrap struct {
	inner IExecutionAPI
}

func (a *ExecutionAPIWrap) bind(router gin.IRoutes, method, path string, preHandlers, innerHandlers []gin.HandlerFunc, f gin.HandlerFunc) {
	var basePath string
	if v, ok := router.(interface {
		BasePath() string
	}); ok {
		basePath = v.BasePath()
	}
	handlers := make([]gin.HandlerFunc, 0, len(preHandlers)+len(innerHandlers)+1)
	handlers = append(handlers, preHandlers...)
	handlers = append(handlers, innerHandlers...)
	handlers = append(handlers, f)
	router.Handle(method, strings.TrimPrefix(path, basePath), handlers...)
}

// List
// @Summary 获取任务列表
// @Description 获取所有的任务列表
// @Produce json
// @Param req query GetTasksReq true "req"
// @Success 200 {object} []*TaskWithAssignmentsResp
// @Router api/v1/tasks [get]
func (a *ExecutionAPIWrap) List(ctx *gin.Context) {
	var req ListExecutionReq
	if !onGinBind(ctx, &req, "QUERY") {
		return
	}
	result, err := a.inner.List(ctx, req)
	onGinResponse[ListExecutionResp](ctx, result, err)
}

// Get
// @Summary 获取任务详情
// @Description 获取指定id的任务详情
// @Produce json
// @Param id path integer true "id"
// @Success 200 {object} *TaskWithAssignmentsResp
// @Router api/v1/tasks/{id} [get]
func (a *ExecutionAPIWrap) Get(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	result, err := a.inner.Get(ctx, id)
	onGinResponse[*TaskExecutionResp](ctx, result, err)
}

// Stats
// @Summary 获取执行统计
// @Description 获取指定任务的执行统计
// @Produce json
// @Param req query ExecutionStatsReq true "req"
// @Success 200 {object} *ExecutionStatsResp
// @Router api/v1/executions/stats [get]
func (a *ExecutionAPIWrap) Stats(ctx *gin.Context) {
	var req ExecutionStatsReq
	if !onGinBind(ctx, &req, "QUERY") {
		return
	}
	result, err := a.inner.Stats(ctx, req)
	onGinResponse[*ExecutionStatsResp](ctx, result, err)
}

// Callback
// @Summary 执行回调
// @Description 执行指定id的执行回调
// @Produce json
// @Param id path integer true "id"
// @Param req body ExecutionCallbackRequest true "req"
// @Success 200 {object} string
// @Router api/v1/executions/{id}/callback [post]
func (a *ExecutionAPIWrap) Callback(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	var req ExecutionCallbackRequest
	if !onGinBind(ctx, &req, "JSON") {
		return
	}
	result, err := a.inner.Callback(ctx, id, req)
	onGinResponse[string](ctx, result, err)
}

// Stop
// @Summary 停止执行
// @Description 停止指定id的执行
// @Produce json
// @Param id path integer true "id"
// @Success 200 {object} string
// @Router api/v1/executions/{id}/stop [post]
func (a *ExecutionAPIWrap) Stop(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	result, err := a.inner.Stop(ctx, id)
	onGinResponse[string](ctx, result, err)
}

func (a *ExecutionAPIWrap) BindList(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "api/v1/executions", preHandlers, nil, a.List)
}

func (a *ExecutionAPIWrap) BindGet(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "api/v1/executions/:id", preHandlers, nil, a.Get)
}

func (a *ExecutionAPIWrap) BindStats(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "api/v1/executions/stats", preHandlers, nil, a.Stats)
}

func (a *ExecutionAPIWrap) BindCallback(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "POST", "api/v1/executions/:id/callback", preHandlers, nil, a.Callback)
}

func (a *ExecutionAPIWrap) BindStop(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "POST", "api/v1/executions/:id/stop", preHandlers, nil, a.Stop)
}

func (a *ExecutionAPIWrap) BindAll(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.BindList(router, preHandlers...)
	a.BindGet(router, preHandlers...)
	a.BindStats(router, preHandlers...)
	a.BindCallback(router, preHandlers...)
	a.BindStop(router, preHandlers...)
}

type ExecutorAPIWrap struct {
	inner IExecutorAPI
}

func (a *ExecutorAPIWrap) bind(router gin.IRoutes, method, path string, preHandlers, innerHandlers []gin.HandlerFunc, f gin.HandlerFunc) {
	var basePath string
	if v, ok := router.(interface {
		BasePath() string
	}); ok {
		basePath = v.BasePath()
	}
	handlers := make([]gin.HandlerFunc, 0, len(preHandlers)+len(innerHandlers)+1)
	handlers = append(handlers, preHandlers...)
	handlers = append(handlers, innerHandlers...)
	handlers = append(handlers, f)
	router.Handle(method, strings.TrimPrefix(path, basePath), handlers...)
}

// List
// @Summary 获取任务列表
// @Description 获取所有的任务列表
// @Produce json
// @Param req query GetTasksReq true "req"
// @Success 200 {object} []*TaskWithAssignmentsResp
// @Router api/v1/tasks [get]
func (a *ExecutorAPIWrap) List(ctx *gin.Context) {
	var req ListExecutorReq
	if !onGinBind(ctx, &req, "QUERY") {
		return
	}
	result, err := a.inner.List(ctx, req)
	onGinResponse[[]*ExecutorResp](ctx, result, err)
}

// Get
// @Summary 获取任务详情
// @Description 获取指定id的任务详情
// @Produce json
// @Param id path integer true "id"
// @Success 200 {object} *TaskWithAssignmentsResp
// @Router api/v1/tasks/{id} [get]
func (a *ExecutorAPIWrap) Get(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	result, err := a.inner.Get(ctx, id)
	onGinResponse[*ExecutorResp](ctx, result, err)
}

// Update
// @Summary 更新执行器
// @Description 更新指定id的执行器
// @Produce json
// @Param id path integer true "id"
// @Param req body UpdateExecutorReq true "req"
// @Success 200 {object} *ExecutorResp
// @Router api/v1/executors/{id} [put]
func (a *ExecutorAPIWrap) Update(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	var req UpdateExecutorReq
	if !onGinBind(ctx, &req, "JSON") {
		return
	}
	result, err := a.inner.Update(ctx, id, req)
	onGinResponse[*ExecutorResp](ctx, result, err)
}

// UpdateStatus
// @Summary 更新执行器状态
// @Description 更新指定id的执行器状态
// @Produce json
// @Param id path integer true "id"
// @Param req body UpdateExecutorStatusReq true "req"
// @Success 200 {object} string
// @Router api/v1/executors/{id}/status [put]
func (a *ExecutorAPIWrap) UpdateStatus(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	var req UpdateExecutorStatusReq
	if !onGinBind(ctx, &req, "JSON") {
		return
	}
	result, err := a.inner.UpdateStatus(ctx, id, req)
	onGinResponse[string](ctx, result, err)
}

// Delete
// @Summary 删除任务
// @Description 删除指定id的任务
// @Produce json
// @Param id path integer true "id"
// @Success 200 {object} string
// @Router api/v1/tasks/{id} [delete]
func (a *ExecutorAPIWrap) Delete(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	result, err := a.inner.Delete(ctx, id)
	onGinResponse[string](ctx, result, err)
}

// Register
// @Summary 注册执行器
// @Description 注册一个新执行器
// @Produce json
// @Param req body RegisterExecutorReq true "req"
// @Success 200 {object} *ExecutorResp
// @Router api/v1/executors/register [post]
func (a *ExecutorAPIWrap) Register(ctx *gin.Context) {
	var req RegisterExecutorReq
	if !onGinBind(ctx, &req, "JSON") {
		return
	}
	result, err := a.inner.Register(ctx, req)
	onGinResponse[*ExecutorResp](ctx, result, err)
}

func (a *ExecutorAPIWrap) BindList(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "api/v1/executors", preHandlers, nil, a.List)
}

func (a *ExecutorAPIWrap) BindGet(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "api/v1/executors/:id", preHandlers, nil, a.Get)
}

func (a *ExecutorAPIWrap) BindUpdate(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "PUT", "api/v1/executors/:id", preHandlers, nil, a.Update)
}

func (a *ExecutorAPIWrap) BindUpdateStatus(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "PUT", "api/v1/executors/:id/status", preHandlers, nil, a.UpdateStatus)
}

func (a *ExecutorAPIWrap) BindDelete(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "DELETE", "api/v1/executors/:id", preHandlers, nil, a.Delete)
}

func (a *ExecutorAPIWrap) BindRegister(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "POST", "api/v1/executors/register", preHandlers, nil, a.Register)
}

func (a *ExecutorAPIWrap) BindAll(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.BindList(router, preHandlers...)
	a.BindGet(router, preHandlers...)
	a.BindUpdate(router, preHandlers...)
	a.BindUpdateStatus(router, preHandlers...)
	a.BindDelete(router, preHandlers...)
	a.BindRegister(router, preHandlers...)
}

type TaskAPIWrap struct {
	inner ITaskAPI
}

func (a *TaskAPIWrap) bind(router gin.IRoutes, method, path string, preHandlers, innerHandlers []gin.HandlerFunc, f gin.HandlerFunc) {
	var basePath string
	if v, ok := router.(interface {
		BasePath() string
	}); ok {
		basePath = v.BasePath()
	}
	handlers := make([]gin.HandlerFunc, 0, len(preHandlers)+len(innerHandlers)+1)
	handlers = append(handlers, preHandlers...)
	handlers = append(handlers, innerHandlers...)
	handlers = append(handlers, f)
	router.Handle(method, strings.TrimPrefix(path, basePath), handlers...)
}

// List
// @Summary 获取任务列表
// @Description 获取所有的任务列表
// @Produce json
// @Param req query GetTasksReq true "req"
// @Success 200 {object} []*TaskWithAssignmentsResp
// @Router api/v1/tasks [get]
func (a *TaskAPIWrap) List(ctx *gin.Context) {
	var req GetTasksReq
	if !onGinBind(ctx, &req, "QUERY") {
		return
	}
	result, err := a.inner.List(ctx, req)
	onGinResponse[[]*TaskWithAssignmentsResp](ctx, result, err)
}

// Get
// @Summary 获取任务详情
// @Description 获取指定id的任务详情
// @Produce json
// @Param id path integer true "id"
// @Success 200 {object} *TaskWithAssignmentsResp
// @Router api/v1/tasks/{id} [get]
func (a *TaskAPIWrap) Get(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	result, err := a.inner.Get(ctx, id)
	onGinResponse[*TaskWithAssignmentsResp](ctx, result, err)
}

// Create
// @Summary 创建任务
// @Description 创建一个新任务
// @Produce json
// @Param req body CreateTaskReq true "req"
// @Success 200 {object} *TaskResp
// @Router api/v1/tasks [post]
func (a *TaskAPIWrap) Create(ctx *gin.Context) {
	var req CreateTaskReq
	if !onGinBind(ctx, &req, "JSON") {
		return
	}
	result, err := a.inner.Create(ctx, req)
	onGinResponse[*TaskResp](ctx, result, err)
}

// Delete
// @Summary 删除任务
// @Description 删除指定id的任务
// @Produce json
// @Param id path integer true "id"
// @Success 200 {object} string
// @Router api/v1/tasks/{id} [delete]
func (a *TaskAPIWrap) Delete(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	result, err := a.inner.Delete(ctx, id)
	onGinResponse[string](ctx, result, err)
}

// UpdateTask
// @Summary 更新任务
// @Description 更新指定id的任务
// @Produce json
// @Param id path integer true "id"
// @Param req body UpdateTaskReq true "req"
// @Success 200 {object} *TaskResp
// @Router api/v1/tasks/{id} [put]
func (a *TaskAPIWrap) UpdateTask(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	var req UpdateTaskReq
	if !onGinBind(ctx, &req, "JSON") {
		return
	}
	result, err := a.inner.UpdateTask(ctx, id, req)
	onGinResponse[*TaskResp](ctx, result, err)
}

// TriggerTask
// @Summary 手动触发任务
// @Description 手动触发指定id的任务
// @Produce json
// @Param id path integer true "id"
// @Param req body TriggerTaskRequest true "req"
// @Success 200 {object} string
// @Router api/v1/tasks/{id}/trigger [post]
func (a *TaskAPIWrap) TriggerTask(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	var req TriggerTaskRequest
	if !onGinBind(ctx, &req, "JSON") {
		return
	}
	result, err := a.inner.TriggerTask(ctx, id, req)
	onGinResponse[string](ctx, result, err)
}

// Pause
// @Summary 暂停任务
// @Description 暂停指定id的任务
// @Produce json
// @Param id path integer true "id"
// @Success 200 {object} string
// @Router api/v1/tasks/{id}/pause [post]
func (a *TaskAPIWrap) Pause(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	result, err := a.inner.Pause(ctx, id)
	onGinResponse[string](ctx, result, err)
}

// Resume
// @Summary 恢复任务
// @Description 恢复指定id的任务
// @Produce json
// @Param id path integer true "id"
// @Success 200 {object} string
// @Router api/v1/tasks/{id}/resume [post]
func (a *TaskAPIWrap) Resume(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	result, err := a.inner.Resume(ctx, id)
	onGinResponse[string](ctx, result, err)
}

// GetTaskExecutors
// @Summary 获取任务的执行器列表
// @Description 获取指定id的任务的执行器列表
// @Produce json
// @Param id path integer true "id"
// @Success 200 {object} []*TaskAssignmentResp
// @Router api/v1/tasks/{id}/executors [get]
func (a *TaskAPIWrap) GetTaskExecutors(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	result, err := a.inner.GetTaskExecutors(ctx, id)
	onGinResponse[[]*TaskAssignmentResp](ctx, result, err)
}

// AssignExecutor
// @Summary 为任务分配执行器
// @Description 为指定id的任务分配执行器
// @Produce json
// @Param id path integer true "id"
// @Param req body AssignExecutorReq true "req"
// @Success 200 {object} *TaskAssignmentResp
// @Router api/v1/tasks/{id}/executors [post]
func (a *TaskAPIWrap) AssignExecutor(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	var req AssignExecutorReq
	if !onGinBind(ctx, &req, "JSON") {
		return
	}
	result, err := a.inner.AssignExecutor(ctx, id, req)
	onGinResponse[*TaskAssignmentResp](ctx, result, err)
}

// UpdateExecutorAssignment
// @Summary 更新任务执行器分配
// @Description 更新指定id的任务执行器分配
// @Produce json
// @Param id path integer true "id"
// @Param executor_id path integer true "executorID"
// @Param req body UpdateExecutorAssignmentReq true "req"
// @Success 200 {object} *TaskAssignmentResp
// @Router api/v1/tasks/{id}/executors/{executor_id} [put]
func (a *TaskAPIWrap) UpdateExecutorAssignment(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	executorID := cast.ToUint64(ctx.Param("executor_id"))
	var req UpdateExecutorAssignmentReq
	if !onGinBind(ctx, &req, "JSON") {
		return
	}
	result, err := a.inner.UpdateExecutorAssignment(ctx, id, executorID, req)
	onGinResponse[*TaskAssignmentResp](ctx, result, err)
}

// UnassignExecutor
// @Summary 取消任务执行器分配
// @Description 取消指定id的任务执行器分配
// @Produce json
// @Param id path integer true "id"
// @Param executor_id path integer true "executorID"
// @Success 200 {object} string
// @Router api/v1/tasks/{id}/executors/{executor_id} [delete]
func (a *TaskAPIWrap) UnassignExecutor(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	executorID := cast.ToUint64(ctx.Param("executor_id"))
	result, err := a.inner.UnassignExecutor(ctx, id, executorID)
	onGinResponse[string](ctx, result, err)
}

// GetTaskStats
// @Summary 获取任务统计
// @Description 获取指定id的任务统计
// @Produce json
// @Param id path integer true "id"
// @Success 200 {object} TaskStatsResp
// @Router api/v1/tasks/{id}/stats [get]
func (a *TaskAPIWrap) GetTaskStats(ctx *gin.Context) {
	id := cast.ToUint64(ctx.Param("id"))
	result, err := a.inner.GetTaskStats(ctx, id)
	onGinResponse[TaskStatsResp](ctx, result, err)
}

func (a *TaskAPIWrap) BindList(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "api/v1/tasks", preHandlers, nil, a.List)
}

func (a *TaskAPIWrap) BindGet(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "api/v1/tasks/:id", preHandlers, nil, a.Get)
}

func (a *TaskAPIWrap) BindCreate(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "POST", "api/v1/tasks", preHandlers, nil, a.Create)
}

func (a *TaskAPIWrap) BindDelete(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "DELETE", "api/v1/tasks/:id", preHandlers, nil, a.Delete)
}

func (a *TaskAPIWrap) BindUpdateTask(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "PUT", "api/v1/tasks/:id", preHandlers, nil, a.UpdateTask)
}

func (a *TaskAPIWrap) BindTriggerTask(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "POST", "api/v1/tasks/:id/trigger", preHandlers, nil, a.TriggerTask)
}

func (a *TaskAPIWrap) BindPause(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "POST", "api/v1/tasks/:id/pause", preHandlers, nil, a.Pause)
}

func (a *TaskAPIWrap) BindResume(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "POST", "api/v1/tasks/:id/resume", preHandlers, nil, a.Resume)
}

func (a *TaskAPIWrap) BindGetTaskExecutors(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "api/v1/tasks/:id/executors", preHandlers, nil, a.GetTaskExecutors)
}

func (a *TaskAPIWrap) BindAssignExecutor(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "POST", "api/v1/tasks/:id/executors", preHandlers, nil, a.AssignExecutor)
}

func (a *TaskAPIWrap) BindUpdateExecutorAssignment(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "PUT", "api/v1/tasks/:id/executors/:executor_id", preHandlers, nil, a.UpdateExecutorAssignment)
}

func (a *TaskAPIWrap) BindUnassignExecutor(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "DELETE", "api/v1/tasks/:id/executors/:executor_id", preHandlers, nil, a.UnassignExecutor)
}

func (a *TaskAPIWrap) BindGetTaskStats(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "api/v1/tasks/:id/stats", preHandlers, nil, a.GetTaskStats)
}

func (a *TaskAPIWrap) BindAll(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.BindList(router, preHandlers...)
	a.BindGet(router, preHandlers...)
	a.BindCreate(router, preHandlers...)
	a.BindDelete(router, preHandlers...)
	a.BindUpdateTask(router, preHandlers...)
	a.BindTriggerTask(router, preHandlers...)
	a.BindPause(router, preHandlers...)
	a.BindResume(router, preHandlers...)
	a.BindGetTaskExecutors(router, preHandlers...)
	a.BindAssignExecutor(router, preHandlers...)
	a.BindUpdateExecutorAssignment(router, preHandlers...)
	a.BindUnassignExecutor(router, preHandlers...)
	a.BindGetTaskStats(router, preHandlers...)
}

//
//func onGinBind(c *gin.Context, val any, typ string) bool {
//    switch typ {
//    case "JSON":
//        if err := c.ShouldBindJSON(val); err != nil {
//            c.JSON(400, gin.H{"error": err.Error()})
//            return false
//        }
//    case "FORM":
//        if err := c.ShouldBind(val); err != nil {
//            c.JSON(400, gin.H{"error": err.Error()})
//            return false
//        }
//    case "QUERY":
//        if err := c.ShouldBindQuery(val); err != nil {
//            c.JSON(400, gin.H{"error": err.Error()})
//            return false
//        }
//    default:
//        if err := c.ShouldBind(val); err != nil {
//            c.JSON(400, gin.H{"error": err.Error()})
//            return false
//        }
//    }
//    return true
//}
//
//func onGinResponse(c *gin.Context, data any, err error) {
//    c.JSON(200, data)
//}
//
//func onGinBindErr(c *gin.Context, err error) {
//    c.JSON(500, gin.H{"error": err.Error()})
//}
